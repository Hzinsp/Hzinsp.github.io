@mixin transition-all()
{
    -webkit-transition: all 0.35s;
    -moz-transition: all 0.35s;
    transition: all 0.35s;
}

@mixin background-cover()
{
    -webkit-background-size: cover;
    -moz-background-size: cover;
    background-size: cover;
    -o-background-size: cover;
}

@mixin button-variant($color, $background, $border)
{
	color: $color;
	background-color: $background;
	border-color: $border;
    font-size: 16px;
	@include transition-all;
    
	&:hover,
	&:focus,
	&.focus,
	&:active,
	&.active,
    &.click,
	.open > .dropdown-toggle & {
		color: darken($color, 20%);
		background-color: darken($background, 5%);
        border-color: darken($border, 7%);
        text-decoration: none;
	}
	&:active,
	&.active,
	.open > .dropdown-toggle & {
		background-image: none;
	}
	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&,
		&:hover,
		&:focus,
		&.focus,
		&:active,
		&.active {
			background-color: $background;
			border-color: $border;
		}
	}
    
	.badge {
		color: $background;
		background-color: $color;
	}
}

@mixin sans-serif-font()
{
	font-family: Microsoft Yahei, 'Open Sans', 'Helvetica Neue', Arial, sans-serif;
}

@mixin eu-font()
{
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
}
@mixin serif-font()
{
	font-family: Microsoft Yahei, 'Merriweather', 'Helvetica Neue', Arial, sans-serif;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  // Then clear the floated columns
  //@include clearfix();

  @media (min-width: $screen-sm-min) {
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
  }

  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
  }
}

// Generate the extra small columns
@mixin make-xs-column($columns: $grid-columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $grid-float-breakpoint) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the small columns
@mixin make-sm-column($columns: $grid-columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the small column offsets
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns: $grid-columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the medium column offsets
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns: $grid-columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the large column offsets
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}